client to main server
최초 접속
enum class GAME_LEVEL : byte{
    EASY;
    NORMAL;
    HARD;
}

client to lobby thread

inGame

struct Packet{
    float x, y;
    byte stateMask;
}

패턴은 시작 시 서버에서 시드 값을 생성해서 넘겨주면
해당 시드 값을 계산해서 사용

stateMask[BBBBBBBB]
     [0] 게임시작용 비트
        [00] 플레이어 번호
            [0] pos a
                [00] 목숨
                    [0] 진행중인가
                        [0] 우승인가

struct ClientInfo{
    shared_ptr<queue<Packet>> packetQuePtr;
    GAME_LEVEL level
    SOCK sock
}

queue<ClientInfo> Client_Info_Queue[GAME_LEVEL]

queue<Packet> Packet[client_number]


wait server func
void Initialize() // lobby thread 생성, client info queue 초기화, 대기 소켓 생성
    dword void LobbyThread()
void acceptClient()
    dword void ClientThread()
void recv() // 클라이언트에게 선택한 난이도 정보를 받음, info queue 에 넣어주고 다시 대기 상태로

-------------------------------------------------------------------------------------------------

client Thread
void Initialize() // 이벤트 큐를 동적으로 할당, 이벤트 큐의 주소와 난이도를 client info push
while(){
    if(recv(struct Packet) == 0)
        0000 0000 x MAX_FLOAT y MIN_FLOAT 을 toServerEventQue에 push
        break; // client 접속 끊김
    else
        toServerEventQue.push();
        
    if(!toClientEventQue.empty())
        send(struct Packet)
    
    yield();
}

-------------------------------------------------------------------------------------------------

lobby server func
void Initialize() // wait server에서 호출
while // client info queue 에 난이도에 따른 큐가 가득 찼는지 확인
- 가득찬 경우
void GameStart(ClientInfo, GAME_LEVEL)
    dword void GameThread(ClientInfo, GAME_LEVEL) // 소켓 정보와 난이도 정보를 전달해 인게임 쓰레드를 생성
    
-------------------------------------------------------------------------------------------------
    
inGame thread func
void Initialize(GAME_LEVEL, sock)
    // 초기 패킷을 toClientEventQue에 push
    // 초기 패킷 - [1][00 플레이어 번호][1 pos][0000 랜덤 패턴 seed 값], x, y : 플레이어 시작 위치
    
while(true){
    if (numOfPlayer == 0)
        break;
    if (numOfPlayer == 1)
        // 해당 플레이어에게 승리 비트 전송
        // 게임 종료
    
    // 게임 로직
    void GameLoop()
        // 모든 플레이어의 toServerQue 확인 후 처리
        void Update()
        // 충돌이 발생하면 toClientQue에 정해진 비트 규칙에따라 push
        
    // 모든 플레이어의 가속도 정보 toClientQue push
    
    if (time <= 0.3)
        // 모든 플레이어 위치 정보 toClientQue push (클라이언트 보정 용도)
}

-------------------------------------------------------------------------------------------------

client
